---
# -------- Preflight: minimal, task-relevante Checks
- name: Preflight | Minimal required variables (Checkmk)
  ansible.builtin.assert:
    that:
      - (groups['postgreses'] | default([])) | length >= 1
      - patroni_rest_port is integer
      - 1 <= (patroni_rest_port | int) <= 65535
      - (haproxy_runtime_socket_host | string) is match('^/.+')
      - checkmk_warn_lag_bytes is integer
      - checkmk_crit_lag_bytes is integer
      - (checkmk_warn_lag_bytes | int) < (checkmk_crit_lag_bytes | int)
      - (checkmk_local_dir | string) is match('^/.+')
    fail_msg: "Preflight failed (Checkmk): check port, HAProxy socket, thresholds and target dir."
    quiet: true

- name: Compute Patroni bind address (patroni_ip)
  when: patroni_bind_interface is defined
  vars:
    _if_key: "{{ 'ansible_' ~ patroni_bind_interface }}"
    _if: "{{ hostvars[inventory_hostname].get(_if_key, {}) }}"
    _ipv4_from_obj: "{{ _if.ipv4.address if (_if.ipv4 is defined and _if.ipv4.address is defined) else omit }}"
    _ipv4_from_addrs: >-
      {{
        (_if.addresses | default({}) | dict2items
          | map(attribute='key')
          | select('match','^\\d+\\.\\d+\\.\\d+\\.\\d+$')
          | list | first) | default(omit)
      }}
  ansible.builtin.set_fact:
    patroni_ip: >-
      {{
        ( _ipv4_from_obj
          if (_ipv4_from_obj is defined)
          else (_ipv4_from_addrs) )
      }}

# -------- Preflight: jeder Host hat eine IPv4 (Facts oder ansible_host)
- name: Preflight | Each DB host has a valid IPv4
  ansible.builtin.assert:
    that:
      - >
        (
          hostvars[item].ansible_host is defined and
          (hostvars[item].ansible_host | string) is match('^\\d+\\.\\d+\\.\\d+\\.\\d+$')
        ) or (
          hostvars[item]['ansible_default_ipv4'] is defined and
          hostvars[item]['ansible_default_ipv4']['address'] is match('^\\d+\\.\\d+\\.\\d+\\.\\d+$')
        )
    fail_msg: "Host {{ item }} has no detectable IPv4 (ansible_host or ansible_default_ipv4.address)."
    quiet: true
  loop: "{{ groups['postgreses'] | default([]) }}"
  loop_control:
    label: "{{ item }}"

# -------- PGDG repository and packages
- name: Apt | Install PGDG key
  ansible.builtin.get_url:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    dest: /usr/share/keyrings/pgdg.asc
    mode: "0644"

- name: Apt | Convert key to GPG keyring
  ansible.builtin.command:
    cmd: >
      gpg --dearmor --yes
      --output /usr/share/keyrings/pgdg.gpg
      /usr/share/keyrings/pgdg.asc
  args:
    creates: /usr/share/keyrings/pgdg.gpg

- name: Apt | Add PGDG repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt {{ ansible_lsb.codename }}-pgdg main"
    filename: "pgdg"
    state: present
  register: pgdg_repo

- name: Apt | Update cache if repository changed
  ansible.builtin.apt:
    update_cache: true
  when: pgdg_repo is changed

- name: Packages | Common tools
  ansible.builtin.apt:
    name: "{{ common_packages }}"
    state: present
    update_cache: true

- name: Packages | Database stack
  ansible.builtin.apt:
    name: "{{ db_packages }}"
    state: present

# -------- Stop distro postgres service (Patroni manages postgres)
- name: Disable distro PostgreSQL service (Patroni manages Postgres)
  ansible.builtin.service:
    name: postgresql
    state: stopped
    enabled: false
  failed_when: false

# -------- Directories
- name: Create Patroni/Postgres directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "{{ item.mode | default('0750') }}"
  loop:
    - { path: "/etc/patroni", mode: "0755" }
    - { path: "/var/lib/postgresql/{{ pg_version }}/patroni" }
    - { path: "/var/lib/postgresql/raft" }
    - { path: "/var/run/postgresql", mode: "2775" }

# -------- Templates and service
- name: Deploy Patroni configuration
  ansible.builtin.template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: "0644"
  notify: Restart patroni

- name: Deploy systemd unit for Patroni
  ansible.builtin.template:
    src: templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - Systemd daemon-reload
    - Restart patroni

- name: Enable & start Patroni
  ansible.builtin.service:
    name: patroni
    state: started
    enabled: true
