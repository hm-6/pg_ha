---
# -------- Preflight: minimal, task-relevante Checks (inkl. Interface)
- name: Preflight | Minimal required variables (HAProxy)
  ansible.builtin.assert:
    that:
      - (groups['postgreses'] | default([])) | length >= 1
      - haproxy_write_port is integer
      - haproxy_read_port is integer
      - haproxy_stats_port is integer
      - 1 <= (haproxy_write_port | int) <= 65535
      - 1 <= (haproxy_read_port | int) <= 65535
      - 1 <= (haproxy_stats_port | int) <= 65535
      - (haproxy_runtime_socket_cfg  | string) is match('^/.+')
      - (haproxy_runtime_socket_host | string) is match('^/.+')
      - hostvars[inventory_hostname]['ansible_' + haproxy_bind_interface] is defined
      - hostvars[inventory_hostname]['ansible_' + haproxy_bind_interface]['ipv4'] is defined
    fail_msg: "Preflight failed (HAProxy): check ports, socket paths and bind interface."
    quiet: true

- name: Compute HAProxy bind address
  vars:
    _if_key: "{{ 'ansible_' ~ haproxy_bind_interface }}"
    _if: "{{ (haproxy_bind_interface is defined) | ternary(hostvars[inventory_hostname].get(_if_key, {}), {}) }}"
    _ipv4_from_obj: "{{ _if.ipv4.address if (_if.ipv4 is defined and _if.ipv4.address is defined) else omit }}"
    _ipv4_from_addrs: >-
      {{
        (_if.addresses | default({}) | dict2items
          | map(attribute='key')
          | select('match','^\\d+\\.\\d+\\.\\d+\\.\\d+$')
          | list | first) | default(omit)
      }}
  ansible.builtin.set_fact:
    haproxy_bind_address: >-
      {{
        ( _ipv4_from_obj
          if (_ipv4_from_obj is defined)
          else (_ipv4_from_addrs
                  if (_ipv4_from_addrs is defined)
                  else ansible_default_ipv4.address) )
      }}

# -------- Packages
- name: Packages | HAProxy and tools
  ansible.builtin.apt:
    name: "{{ haproxy_packages + common_packages }}"
    state: present
    update_cache: true

# -------- Config template + service
- name: Deploy HAProxy configuration (validated with -c)
  ansible.builtin.template:
    src: templates/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: '0644'
    validate: 'haproxy -c -f %s'
  notify: Reload haproxy

- name: Enable & start HAProxy
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: true
