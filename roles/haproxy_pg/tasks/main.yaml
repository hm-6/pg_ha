---
# Preflight: validate HAProxy-related variables (fail early if wrong)
- name: Preflight | Validate required variables (HAProxy)
  ansible.builtin.assert:
    that:
      - groups['db'] is defined
      - (groups['db'] | length) >= 1
      - haproxy_write_port is integer
      - haproxy_read_port is integer
      - haproxy_stats_port is integer
      - 1 <= (haproxy_write_port | int) <= 65535
      - 1 <= (haproxy_read_port | int) <= 65535
      - 1 <= (haproxy_stats_port | int) <= 65535
      - (haproxy_write_port | int) != (haproxy_read_port | int)
      - haproxy_runtime_socket_cfg | regex_search('^/.+\\.sock$')
      - haproxy_runtime_socket_host | regex_search('^/.+\\.sock$')
    fail_msg: >
      HAProxy variables are missing/invalid. Check ports and socket paths in vars.yaml.
    success_msg: HAProxy variables look sane.

# Pr체fe, dass das gew체nschte Interface existiert und eine IPv4 hat (falls gesetzt)
- name: Preflight | Validate chosen HAProxy bind interface exists
  when: haproxy_bind_interface is defined
  vars:
    _if_key: "{{ 'ansible_' ~ haproxy_bind_interface }}"
    _if: "{{ hostvars[inventory_hostname].get(_if_key, {}) }}"
    _ipv4_from_obj: "{{ _if.ipv4.address if (_if.ipv4 is defined and _if.ipv4.address is defined) else omit }}"
    _ipv4_from_addrs: >-
      {{
        (_if.addresses | default({}) | dict2items
          | map(attribute='key')
          | select('match','^\\d+\\.\\d+\\.\\d+\\.\\d+$')
          | list | first) | default(omit)
      }}
  ansible.builtin.assert:
    that:
      - ansible_facts.interfaces is defined
      - haproxy_bind_interface in ansible_facts.interfaces
      - _if is mapping
      - (_ipv4_from_obj is defined) or (_ipv4_from_addrs is defined)
    fail_msg: >
      HAProxy bind interface {{ haproxy_bind_interface }} not found or has no IPv4.
      Check the interface name and ensure facts are gathered.
    success_msg: >-
      HAProxy will bind on {{ haproxy_bind_interface }}
      ({% if _ipv4_from_obj is defined %}{{ _ipv4_from_obj }}{% else %}{{ _ipv4_from_addrs }}{% endif %})

# Ermittele die Bind-Adresse und stelle sie als Fact bereit (f채llt auf Default-IPv4 zur체ck)
- name: Compute HAProxy bind address
  vars:
    _if_key: "{{ 'ansible_' ~ haproxy_bind_interface }}"
    _if: "{{ (haproxy_bind_interface is defined) | ternary(hostvars[inventory_hostname].get(_if_key, {}), {}) }}"
    _ipv4_from_obj: "{{ _if.ipv4.address if (_if.ipv4 is defined and _if.ipv4.address is defined) else omit }}"
    _ipv4_from_addrs: >-
      {{
        (_if.addresses | default({}) | dict2items
          | map(attribute='key')
          | select('match','^\\d+\\.\\d+\\.\\d+\\.\\d+$')
          | list | first) | default(omit)
      }}
  ansible.builtin.set_fact:
    haproxy_bind_address: >-
      {{
        ( _ipv4_from_obj
          if (_ipv4_from_obj is defined)
          else (_ipv4_from_addrs
                  if (_ipv4_from_addrs is defined)
                  else ansible_default_ipv4.address) )
      }}

# Install HAProxy + helper tools, deploy configuration, and enable service
- name: Packages | HAProxy and tools
  ansible.builtin.apt:
    name: "{{ haproxy_packages + common_packages }}"
    state: present
    update_cache: true

# Validate configuration syntax server-side before applying
- name: Deploy HAProxy configuration (validated with -c)
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: '0644'
    validate: 'haproxy -c -f %s'
  notify: Reload haproxy

- name: Enable & start HAProxy
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: true
